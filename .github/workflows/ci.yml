name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black flake8 mypy

    - name: 🔍 Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: 🎨 Format check with black
      run: |
        black --check --diff .

    - name: 🔍 Type check with mypy
      run: |
        mypy data/ --ignore-missing-imports

    - name: 🧪 Run tests with pytest
      run: |
        pytest tests/ --cov=data --cov-report=xml --cov-report=html

    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: 📦 Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: 🔒 Run security scan with bandit
      run: |
        bandit -r data/ -f json -o bandit-report.json || true

    - name: 🛡️ Check dependencies with safety
      run: |
        safety check --json --output safety-report.json || true

  documentation:
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Check documentation links
      run: |
        # Check for broken links in markdown files
        find . -name "*.md" -exec grep -l "http" {} \; | xargs -I {} grep -o 'http[^ ]*' {} | while read url; do
          if curl --output /dev/null --silent --head --fail "$url"; then
            echo "✅ $url is accessible"
          else
            echo "❌ $url is broken"
            exit 1
          fi
        done

    - name: 📚 Validate markdown
      run: |
        # Check markdown syntax
        find . -name "*.md" -exec markdownlint {} \;

  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: 📦 Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: 🏗️ Build package
      run: |
        python -m build

    - name: 📦 Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: 🏗️ Build package
      run: |
        python -m build

    - name: 🚀 Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: 📦 Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/*
        asset_name: sp500-prediction-ml-${{ github.ref_name }}

  notify:
    needs: [test, security, documentation]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 📧 Notify on failure
      if: failure()
      run: |
        echo "❌ CI/CD pipeline failed!"
        echo "Check the logs for details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

    - name: 🎉 Notify on success
      if: success()
      run: |
        echo "✅ CI/CD pipeline completed successfully!"
        echo "All tests passed and code quality checks completed."
